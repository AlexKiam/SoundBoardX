// This file was generated by PermissionsDispatcher. Do not modify!
package io.github.xtonousou.soundboardx;

import android.content.Intent;
import android.net.Uri;
import android.provider.Settings;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class MainActivityPermissionsDispatcher {
  private static final int REQUEST_WRITESETTINGS = 0;

  private static final String[] PERMISSION_WRITESETTINGS = new String[] {"android.permission.WRITE_SETTINGS"};

  private MainActivityPermissionsDispatcher() {
  }

  static void writeSettingsWithPermissionCheck(MainActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_WRITESETTINGS) || Settings.System.canWrite(target)) {
      target.writeSettings();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_WRITESETTINGS)) {
        target.writeSettingsOnShowRationale(new MainActivityWriteSettingsPermissionRequest(target));
      } else {
        Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS, Uri.parse("package:" + target.getPackageName()));
        target.startActivityForResult(intent, REQUEST_WRITESETTINGS);
      }
    }
  }

  static void onActivityResult(MainActivity target, int requestCode) {
    switch (requestCode) {
      case REQUEST_WRITESETTINGS:
      if (PermissionUtils.hasSelfPermissions(target, PERMISSION_WRITESETTINGS) || Settings.System.canWrite(target)) {
        target.writeSettings();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_WRITESETTINGS)) {
          target.writeSettingsOnNeverAskAgain();
        } else {
          target.writeSettingsOnPermissionDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class MainActivityWriteSettingsPermissionRequest implements PermissionRequest {
    private final WeakReference<MainActivity> weakTarget;

    private MainActivityWriteSettingsPermissionRequest(MainActivity target) {
      this.weakTarget = new WeakReference<MainActivity>(target);
    }

    @Override
    public void proceed() {
      MainActivity target = weakTarget.get();
      if (target == null) return;
      Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS, Uri.parse("package:" + target.getPackageName()));
      target.startActivityForResult(intent, REQUEST_WRITESETTINGS);
    }

    @Override
    public void cancel() {
      MainActivity target = weakTarget.get();
      if (target == null) return;
      target.writeSettingsOnPermissionDenied();
    }
  }
}
